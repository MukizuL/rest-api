package main

import (
	"database/sql"
	"log"

	_ "github.com/lib/pq"
)

type SQLStorage struct {
	db *sql.DB
}

//Opens new Database connection with chosen configuration
func NewSQLStorage(cfg Config) *SQLStorage {
	db, err := sql.Open("postgres", cfg.FormatDSN())
	if err != nil {
		log.Fatal(err)
	}

	//Important: Open may just validate its arguments without creating a connection to the database.
	//To verify that the data source name is valid, call DB.Ping.
	err = db.Ping() 
	if err != nil {
		log.Fatal(err)
	}
	log.Println("Connected to database")

	return &SQLStorage{db: db}
}

//Initializes tables
func (s *SQLStorage) Init() (*sql.DB, error) {
	if err := s.createProjectsTable(); err != nil {
		return nil, err
	}
	if err := s.createUsersTable(); err != nil {
		return nil, err
	}
	if err := s.createTasksTable(); err != nil {
		return nil, err
	}
	return s.db, nil
}

func (s *SQLStorage) createProjectsTable() error {
	_, err := s.db.Exec(`
		CREATE TABLE IF NOT EXISTS projects (
		id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
		name VARCHAR(255) NOT NULL,
		createdAT TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
		)
	`)

	return err
}

func (s *SQLStorage) createUsersTable() error {
	_, err := s.db.Exec(`
		CREATE TABLE IF NOT EXISTS users (
		id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
		email VARCHAR(255) NOT NULL UNIQUE,
		firstName VARCHAR(255) NOT NULL,
		lastName VARCHAR(255) NOT NULL,
		password VARCHAR(255) NOT NULL,
		createdAT TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
		)
	`)

	return err
}

func (s *SQLStorage) createTasksTable() error {
	_, err := s.db.Exec(`
		CREATE TABLE IF NOT EXISTS tasks (
		id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
		name VARCHAR(255) NOT NULL,
		status ENUM("TODO", "IN_PROGRESS", "IN_TESTING", "DONE") NOT NULL DEFAULT "TODO",
		projectID INT NOT NULL,
		assignedToID INT NOT NULL,
		createdAT TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,

		FOREIGN KEY (assignedToID) REFERENCES users(id),
		FOREIGN KEY (projectId) REFERENCES projects(id)
		)
	`)

	return err
}